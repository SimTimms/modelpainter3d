/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 public/marine-mini.gltf
*/

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';

export function Model(props) {
  const { nodes, materials } = useGLTF('/marine-mini.gltf');
  const { boneConfig } = props;
  const bones = [];
  const objArr = Object.keys(nodes);

  for (let i = 0; i < objArr.length; i++) {
    const isBone = nodes[objArr[i]].isBone;
    if (isBone) {
      const hasChildren = nodes[objArr[i]].children.length > 0;
      console.log(nodes[objArr[i]]);
      bones.push({ name: objArr[i], rot: [0, 0, 0] });
    }
  }
  console.log();
  return (
    <group {...props} dispose={null} scale={0.004} position={[0, -0.3, 0]}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <primitive object={nodes.b_C_Base}>
          <primitive object={nodes.b_C_Pelvis}>
            <primitive object={nodes.b_C_Spine1}>
              <primitive object={nodes.b_C_Spine2}>
                <primitive object={nodes.b_C_Chest}>
                  <primitive
                    object={nodes.pb_L_YA201_Breast_01}
                    scale={boneConfig.pb_R_YA201_Breast_01.scale}
                    rotation={[
                      boneConfig.pb_R_YA201_Breast_01.scale * 0.8 - 1,
                      -1.2,
                      0,
                    ]}
                  ></primitive>
                  <primitive
                    object={nodes.pb_R_YA201_Breast_01}
                    scale={boneConfig.pb_R_YA201_Breast_01.scale}
                    rotation={[
                      boneConfig.pb_R_YA201_Breast_01.scale * 0.8 - 1,
                      -1.9,
                      0,
                    ]}
                  ></primitive>
                </primitive>
              </primitive>
            </primitive>
            <primitive
              object={nodes.b_R_Leg1}
              rotation={[0, 3, boneConfig.b_R_Leg1.rotation[0]]}
            ></primitive>
            <primitive
              object={nodes.b_L_Leg1}
              rotation={[0, 3, -boneConfig.b_R_Leg1.rotation[0]]}
            ></primitive>
          </primitive>
        </primitive>
        <skinnedMesh
          geometry={nodes.Untitled.geometry}
          material={materials['face-nude']}
          skeleton={nodes.Untitled.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Untitled_1.geometry}
          material={materials.eyes}
          skeleton={nodes.Untitled_1.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Untitled_2.geometry}
          material={materials.body}
          skeleton={nodes.Untitled_2.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Untitled_3.geometry}
          material={materials.outfit}
          skeleton={nodes.Untitled_3.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Untitled_4.geometry}
          material={materials.hair}
          skeleton={nodes.Untitled_4.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Untitled_5.geometry}
          material={materials.eyeshadow}
          skeleton={nodes.Untitled_5.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Untitled_6.geometry}
          material={materials.eyelashes}
          skeleton={nodes.Untitled_6.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Untitled_7.geometry}
          material={materials['teeth-tongue']}
          skeleton={nodes.Untitled_7.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/marine-mini.gltf');
