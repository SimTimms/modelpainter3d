/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 public/shoulder_termie_left.gltf
*/

import React, { useState, useRef, useEffect } from 'react';

export function Mesh(props) {
  const {
    paintRef,
    currentPaint,
    name,
    show,
    baseColor,
    nodeGeometry,
    material,
    unitNumber,
    clone,
  } = props;

  const [colours, setColours] = useState(null);
  const [base, setBase] = useState(null);
  const canPaint = useRef(true);

  useEffect(() => {
    if (paintRef && paintRef.current[name]) {
      setColours(paintRef.current[name].paint);
    }
  }, [paintRef]);

  useEffect(() => {
    if (paintRef && paintRef.current[name]) {
      if (clone) setColours(paintRef.current[name].paint);
    }
  }, [clone]);

  useEffect(() => {
    setBase(baseColor);
  }, [baseColor]);
  if (!base) return null;
  return (
    <mesh
      key="mesh"
      geometry={nodeGeometry}
      onPointerUp={(event) => {
        if (canPaint.current) {
          event.stopPropagation();
          console.log(name, canPaint.current);

          setColours(currentPaint ? currentPaint : '#ff0000');
          if (paintRef) {
            paintRef.current[name] = {
              paint: currentPaint ? currentPaint : '#ff0000',
              unitNumber: unitNumber,
            };
          }
        }
      }}
      position={show && [0, 10, 0]}
      castShadow={true}
      receiveShadow={true}
      onPointerDown={() => {
        canPaint.current = true;
      }}
      onPointerMove={() => (canPaint.current = false)}
      material={material}
    >
      <meshStandardMaterial
        attach="material"
        color={!colours ? base.color : colours.color}
        metalness={colours && colours.metal ? 0.6 : 0}
        roughness={colours && colours.metal ? 0.7 : 1}
      />
    </mesh>
  );
}
