/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.3 public/shoulder_termie_left.gltf
*/

import React, { useState, useRef, useEffect } from 'react';
import { Light } from './Light.jsx';
import { paints } from '../paints.js';

export function Mesh(props) {
  const [colours, setColours] = useState(paints[0]);
  const canPaint = useRef(true);

  useEffect(() => {
    if (props.paintRef && props.paintRef.current[props.name]) {
      setColours(props.paintRef.current[props.name]);
    }
  }, [props.paintRef]);
  return (
    <>
      {props.lights && (
        <>
          {props.lights.pos.map((item, index) => {
            return (
              <Light
                key={`${index}-${Math.random()}`}
                position={item}
                v={false}
                d={props.lights.dist}
                c={colours.color}
              />
            );
          })}
        </>
      )}
      <mesh
        geometry={props.nodeGeometry}
        position={props.position}
        onPointerUp={(event) => {
          if (canPaint.current) {
            event.stopPropagation();
            setColours(props.currentPaint ? props.currentPaint : '#ff0000');
            if (props.paintRef) {
              props.paintRef.current[props.name] = props.currentPaint
                ? props.currentPaint
                : '#ff0000';
            }
          }
        }}
        onPointerDown={() => (canPaint.current = true)}
        onPointerMove={() => (canPaint.current = false)}
        material={props.material}
      >
        <meshStandardMaterial
          attach="material"
          color={colours.color}
          map={props.material ? props.material.map : null}
          castShadow={true}
          receiveShadow={true}
          metalness={colours.metal ? 1.1 : 0}
          roughness={colours.metal ? 0.6 : 1}
        />
      </mesh>
    </>
  );
}
